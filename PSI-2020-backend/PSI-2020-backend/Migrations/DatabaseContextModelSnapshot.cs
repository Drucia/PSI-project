// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PSI_2020_backend.Models.Database;

namespace PSI_2020_backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EducationProgramId")
                        .HasColumnType("uuid");

                    b.Property<string>("EngName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SubjectCardId")
                        .HasColumnType("uuid");

                    b.Property<int>("SumHoursForExercises")
                        .HasColumnType("integer");

                    b.Property<int>("SumHoursForLaboratories")
                        .HasColumnType("integer");

                    b.Property<int>("SumHoursForLectures")
                        .HasColumnType("integer");

                    b.Property<int>("SumHoursForProjects")
                        .HasColumnType("integer");

                    b.Property<int>("SumHoursForSeminaries")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EducationProgramId");

                    b.HasIndex("SubjectCardId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.DatabaseUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.EducationProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Degree")
                        .HasColumnType("integer");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsHistorical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWIP")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ModificationType")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Term")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("EducationPrograms");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("EngName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.LearningEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionEng")
                        .HasColumnType("text");

                    b.Property<Guid?>("SubjectCardId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectCardId");

                    b.ToTable("LearningEffect");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.Program", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("EngSubject")
                        .HasColumnType("text");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<Guid?>("SubjectCardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubjectCardId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubjectCardId2")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubjectCardId3")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubjectCardId4")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectCardId");

                    b.HasIndex("SubjectCardId1");

                    b.HasIndex("SubjectCardId2");

                    b.HasIndex("SubjectCardId3");

                    b.HasIndex("SubjectCardId4");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("EngName")
                        .HasColumnType("text");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("Specialization");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.SubjectCard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Aims")
                        .HasColumnType("text");

                    b.Property<string>("AimsEng")
                        .HasColumnType("text");

                    b.Property<string>("Bibliography")
                        .HasColumnType("text");

                    b.Property<string>("BibliographyEng")
                        .HasColumnType("text");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Prerequisites")
                        .HasColumnType("text");

                    b.Property<string>("PrerequisitesEng")
                        .HasColumnType("text");

                    b.Property<List<string>>("Professors")
                        .HasColumnType("text[]");

                    b.Property<string>("Tools")
                        .HasColumnType("text");

                    b.Property<string>("ToolsEng")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubjectCard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PSI_2020_backend.Models.Database.DatabaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PSI_2020_backend.Models.Database.DatabaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSI_2020_backend.Models.Database.DatabaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PSI_2020_backend.Models.Database.DatabaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.Course", b =>
                {
                    b.HasOne("PSI_2020_backend.Models.Database.EducationProgram", null)
                        .WithMany("Courses")
                        .HasForeignKey("EducationProgramId");

                    b.HasOne("PSI_2020_backend.Models.Database.SubjectCard", "SubjectCard")
                        .WithMany()
                        .HasForeignKey("SubjectCardId");

                    b.Navigation("SubjectCard");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.EducationProgram", b =>
                {
                    b.HasOne("PSI_2020_backend.Models.Database.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId");

                    b.HasOne("PSI_2020_backend.Models.Database.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Field");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.LearningEffect", b =>
                {
                    b.HasOne("PSI_2020_backend.Models.Database.SubjectCard", null)
                        .WithMany("LearningEffects")
                        .HasForeignKey("SubjectCardId");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.Program", b =>
                {
                    b.HasOne("PSI_2020_backend.Models.Database.SubjectCard", null)
                        .WithMany("Exercises")
                        .HasForeignKey("SubjectCardId");

                    b.HasOne("PSI_2020_backend.Models.Database.SubjectCard", null)
                        .WithMany("Laboratories")
                        .HasForeignKey("SubjectCardId1");

                    b.HasOne("PSI_2020_backend.Models.Database.SubjectCard", null)
                        .WithMany("Lectures")
                        .HasForeignKey("SubjectCardId2");

                    b.HasOne("PSI_2020_backend.Models.Database.SubjectCard", null)
                        .WithMany("Projects")
                        .HasForeignKey("SubjectCardId3");

                    b.HasOne("PSI_2020_backend.Models.Database.SubjectCard", null)
                        .WithMany("Seminaries")
                        .HasForeignKey("SubjectCardId4");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.Specialization", b =>
                {
                    b.HasOne("PSI_2020_backend.Models.Database.Field", null)
                        .WithMany("Specializations")
                        .HasForeignKey("FieldId");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.EducationProgram", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.Field", b =>
                {
                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("PSI_2020_backend.Models.Database.SubjectCard", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Laboratories");

                    b.Navigation("LearningEffects");

                    b.Navigation("Lectures");

                    b.Navigation("Projects");

                    b.Navigation("Seminaries");
                });
#pragma warning restore 612, 618
        }
    }
}
